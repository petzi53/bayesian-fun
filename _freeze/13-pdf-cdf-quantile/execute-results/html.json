{
  "hash": "2d0aefe60c94d458a97663804e4d7127",
  "result": {
    "markdown": "# Tools of Parameter Estimation: The PDF, CDF, and Quantile Function\n\n> This chapter will cover more on the <a class='glossary' title='A probability density function (pdf) tells us the probability that a random variable takes on a certain value. (Statology) The probability density function (PDF) for a given value of random variable X represents the density of probability (probability per unit random variable) within a particular range of that random variable X. Probability densities can take values larger than 1. (StackExchange Mathematics) We can use a continuous probability distribution to calculate the probability that a random variable lies within an interval of possible values. To do this, we use the continuous analogue of a sum, an integral. However, we recognise that calculating an integral is equivalent to calculating the area under a probability density curve. We use p(value) for probability densities and Pr for probabilities. (Bayesian Statistics, Chap.3)'>probability density function</a> (PDF); introduce the <a class='glossary' title='A cumulative distribution function (CDF) tells us the probability that a random variable takes on a value less than or equal to x. (Statoloy) It sums all parts of the distribution, replacing a lot of calculus work. The CDF takes in a value and returns the probability of getting that value or lower. (BF, Chap.13) A CDF is a hypothetical model of a distribution, the ECDF models empirical (i.e. observed) data. (Statistics How To)'>cumulative distribution function</a> (CDF), which helps us more easily determine the probability of ranges of values; and introduce <a class='glossary' title='Quantiles are cut points dividing the range of a probability distribution into continuous intervals with equal probabilities (Wikipedia)'>quantiles</a>, which divide our probability distributions into parts with equal probabilities. For example, a *percentile* is a 100-quantile, meaning it divides the probability distribution into 100 equal pieces. (115)\n\n## Estimating the Conversion Rate for an Email Signup List\n\n> Say you run a blog and want to know the probability that a visitor to your blog will subscribe to your email list. In marketing terms, getting a user to perform a desired event is referred to as the *conversion event*, or simply a *conversion*, and the probability that a user will subscribe is the *conversion rate*.\n\n> As discussed in @sec-beta-distribution, we would use the beta distribution to estimate p, the probability of subscribing, when we know `k`, the number of people subscribed, and `n`, the total number of visitors. The two parameters needed for the beta distribution are `α`, which in this case represents the total subscribed (`k`), and `β`, representing the total not subscribed (`n – k`).\n\n## The Probability Density Function\n\n> let’s say for the first 40,000 visitors, you get 300 subscribers. The PDF for our problem is the beta distribution where α = 300 and β = 39,700.\n\n::: {#thm-mean-beta}\n#### Computing the mean of the beta distribution\n\n$$\n\\begin{align*}\n\\mu_{Beta} = \\frac{\\alpha}{\\alpha + \\beta} \\\\\n\\mu_{Beta} = \\frac{300}{300 + 39,700} = 0.0075\n\\end{align*}\n$$ {#eq-mean-beta}\n\nThe blog’s average conversion rate is simply $\\frac{subscribed}{visited}$.\n\n:::\n\n### Visualizing and Interpreting the PDF\n\n![Visualizing the beta PDF for our beliefs in the true conversion rate](img/13fig01.jpg){#fig-13-01\nfig-alt=\"The beta PDF as almost a normal distribution with mode = mean at .0075\"\nfig-align=\"center\" width=\"70%\"}\n\n> Given that we have uncertainty in our measurement, and we have a mean, it could be useful to investigate how much more likely it is that the true conversion rate is 0.001 higher or lower than the mean of 0.0075 we observed. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nintegrate(function(x)\n    dbeta(x, 300, 39700), 0, 0.0065)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> 0.007978686 with absolute error < 3.8e-07\n```\n\n\n:::\n\n```{.r .cell-code}\nintegrate(function(x)\n    dbeta(x, 300, 39700), 0.0085, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> 0.01248151 with absolute error < 9.4e-09\n```\n\n\n:::\n:::\n\n\n> if we had to make a decision with the limited data we have, we could still calculate how much likelier one extreme is than the other:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nintegrate(function(x)\n    dbeta(x, 300, 39700), 0.0085, 1)[[\"value\"]] /\nintegrate(function(x)\n    dbeta(x, 300, 39700), 0, 0.0065)[[\"value\"]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 1.564357\n```\n\n\n:::\n:::\n\n\nIt’s 56 percent more likely that our true conversion rate is greater than 0.0085 than that it’s lower than 0.0065.\n\n### Working with the PDF in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxs <- seq(0.005, 0.01, by = 0.00001)\nxs.all <- seq(0, 1, by = 0.0001)\nplot(\n    xs,\n    dbeta(xs, 300, 40000 - 300),\n    type = 'l',\n    lwd = 3,\n    ylab = \"density\",\n    xlab = \"probability of subscription\",\n    main = \"PDF Beta(300,39700)\"\n)\n```\n\n::: {.cell-output-display}\n![](13-pdf-cdf-quantile_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\nI am going to use my own code in @sec-replicate-fig-13-1.\n\n## Introducing the Cumulative Distribution Function\n\n> we can save ourselves a lot of effort with the cumulative distribution function (CDF), which sums all parts of our distribution, replacing a lot of calculus work. … The CDF takes in a value and returns the probability of getting that value or lower. \n\n> The CDF gets this probability by taking the cumulative area under the curve for the PDF (for those comfortable with calculus, the CDF is the *anti-derivative* of the PDF). We can summarize this process in two steps: (1) figure out the cumulative area under the curve for each value of the PDF, and (2) plot those values. That’s our CDF.\n\n\n\n![Visualizing the cumulative area under the curve](img/13fig02.jpg){#fig-13-02\nfig-alt=\"Visualizing the cumulative area under the curve of the beta distribution in steps to 0.0005\"\nfig-align=\"center\" width=\"70%\"}\n\n@fig-13-02 shows the cumulative area under the curve for the PDF of Beta(300,39700). As you can see, our cumulative area under the curve takes into account all of the area in the pieces to its left.\n\nUsing this approach, as we move along the PDF, we take into account an increasingly higher probability until our total area is 1, or complete certainty. To turn this into the CDF, we can imagine a function that looks at only these areas under the curve. \n\n@fig-13-03 shows what happens if we plot the area under the curve for each of our points, which are 0.0005 apart.\n\n![Plotting just the cumulative probability from @fig-13-02](img/13fig03.jpg){#fig-13-03\nfig-alt=\"Plotting the area under the curve for each of our points, which are 0.0005 apart results in an S curve\"\nfig-align=\"center\" width=\"70%\"}\n\n> Now we have a way of visualizing just how the cumulative area under the curve changes as we move along the values for our PDF. Of course, the problem is that we’re using these discrete chunks. In reality, the CDF just uses infinitely small pieces of the PDF, so we get a nice smooth line as seen in @fig-13-04.\n\n![The CDF for our problem](img/13fig04.jpg){#fig-13-04\nfig-alt=\"The CDF for our problem of conversion to blog subscriber\"\nfig-align=\"center\" width=\"70%\"}\n\n### Visualizing and Interpreting the CDF\n\n> The PDF is most useful visually for quickly estimating where the peak of a distribution is, and for getting a rough sense of the width (variance) and shape of a distribution. However, with the PDF it is very difficult to reason about the probability of various ranges visually. The CDF is a much better tool for this.\n\n#### Finding the median\n\n> Unlike the mean, computing the median can actually be pretty tricky. For small, discrete cases, it’s as simple as putting your observations in order and selecting the value in the middle. But for continuous distributions like our beta distribution, it’s a little more complicated.\n\n> Thankfully, we can easily spot the median on a visualization of the CDF. We can simply draw a line from the point where the cumulative probability is 0.5, meaning 50 percent of the values are below this point and 50 percent are above. \n\n![Estimating the median visually using the CDF](img/13fig05.jpg){#fig-13-05\nfig-alt=\"Estimating the median visually using the CDF\"\nfig-align=\"center\" width=\"70%\"}\n\n#### Approximating Integrals Visually\n\n![Visually performing integration using the CDF](img/13fig06.jpg){#fig-13-06\nfig-alt=\"Visually performing integration using the CDF\"\nfig-align=\"center\" width=\"70%\"}\n\n#### Estimating Confidence Intervals\n\n![Estimating our confidence intervals visually using the CDF](img/13fig07.jpg){#fig-13-07\nfig-alt=\"Estimating our confidence intervals visually using the CDF\"\nfig-align=\"center\" width=\"70%\"}\n\n### Using the CDF in R\n\n## The Quantile Function\n\n### Visualizing and Understanding the Quantile Function\n\n![Visually, the quantile function is just a rotation of the CDF](img/13fig08.jpg){#fig-13-08\nfig-alt=\"Visually, the quantile function is just a rotation of the CDF\"\nfig-align=\"center\" width=\"70%\"}\n\n### Calculating Quantiles in R\n\n## Wrapping Up\n\n## Exercises\n\nTry answering the following questions to see how well you understand the tools of parameter estimation. The solutions can be found at https://nostarch.com/learnbayes/.\n\n\n### Exercise 13-1\nUsing the code example for plotting the PDF on page 127, plot the CDF and quantile functions.\n\n### Exercise 13-2\nReturning to the task of measuring snowfall from Chapter 10, say you have the following measurements (in inches) of snowfall:\n7.8, 9.4, 10.0, 7.9, 9.4, 7.0, 7.0, 7.1, 8.9, 7.4\n\nWhat is your 99.9 percent confidence interval for the true value of snowfall?\n\n### Exercise 13-3\nA child is going door to door selling candy bars. So far she has visited 30 houses and sold 10 candy bars. She will visit 40 more houses today. What is the 95 percent confidence interval for how many candy bars she will sell the rest of the day?\n\n\n## Experiments\n\nI started with @fig-pb-13-4a because this is the easiest graph, as it replicates @fig-13-04 with just the CDF and nothing else. So maybe you will begin also with this basic plot. After @fig-pb-13-4a the natural sequence -- ordered by complexity -- is @fig-pb-13-3. After that you can inspect in detail my different tries with @fig-13-02 (@fig-pb-13-2a, @fig-pb-13-2b and my best solution @fig-pb-13-2c) . Then follow my sequences here from @fig-13-05 to @fig-13-08.\n\n::: {.callout-important}\nThere is the following system in using distributions with R, exemplified with the normal distribution:\n\n- `dnorm` for plotting probability densities functions (PDFs).\n- `pnorm` for plotting cumulative distribution functions (CDFs).\n- `qnorm` for plotting quantile functions, it is the reverse of CDFs.\n- `rnorm` for generating and plotting random distributions.\n\nSee \n\n1. R help file for [Distributions in the stats package](https://rdrr.io/r/stats/Distributions.html).\n2. [The distribution zoo](https://ben18785.shinyapps.io/distribution-zoo/) (a shiny application by [Ben Lambert](https://ben-lambert.com/bayesian/) & [Fergus Cooper](https://www.cs.ox.ac.uk/people/fergus.cooper/site/)). See for the code the [GitHub repo](https://github.com/ben18785/distribution-zoo).\n:::\n\n\n\n### Replicate Figure 13-1 {#sec-replicate-fig-13-1}\n\n#### Wrong dimension of x-axis for Figure 13-1 \n\nAt first I got the following graph:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble::tibble(x = seq(0, 1, .0001),\n               y = dbeta(x, 300, 39700)) |> \n    ggplot2::ggplot(ggplot2::aes(x = x, y = y)) +\n    ggplot2::geom_line()\n```\n\n::: {.cell-output-display}\n![](13-pdf-cdf-quantile_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThe problem here is that the interesting part of the PDF is very small as we know from the $\\frac{300}{40000} = 0.0075$. Therefore it does not make sense to spread the grid from 0 to 1. We get a much better visualization in the area 0 to 001:\n\n#### Better dimension of x-axis but still not identical for Figure 13-1 \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble::tibble(x = seq(0, 0.01, .0001),\n               y = dbeta(x, 300, 39700)) |> \n    ggplot2::ggplot(ggplot2::aes(x = x, y = y)) +\n    ggplot2::geom_line()\n```\n\n::: {.cell-output-display}\n![](13-pdf-cdf-quantile_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nBut even this curve is not optimal. Now let's try the interval [0.005, 0.01]:\n\n#### Optimal dimension of x-axis but grid too wide for smooth Figure 13-1\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble::tibble(x = seq(0.005, 0.01, .0001),\n               y = dbeta(x, 300, 39700)) |> \n    ggplot2::ggplot(ggplot2::aes(x = x, y = y)) +\n    ggplot2::geom_line()\n```\n\n::: {.cell-output-display}\n![](13-pdf-cdf-quantile_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\nIt turns out that this is the interval also used in the book example. But in my visualization you can see some irregularity at the top, because my grid has too coarse. It has only 51 values. Let's try a much finer grid with 5001 values:\n\n#### Optimal replication of Figure 13-1\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntibble::tibble(x = seq(0.005, 0.01, .00001),\n               y = dbeta(x, 300, 39700)) |> \n    ggplot2::ggplot(ggplot2::aes(x = x, y = y)) +\n    ggplot2::geom_line()\n```\n\n::: {.cell-output-display}\n![](13-pdf-cdf-quantile_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### Replicate Figure 13-2 \n\n#### First try (bad)\n\n::: {.callout-note}\nI had to learn about the difference between `annotate(geom = \"text\" …)` and `annotate(geom = \"label\" …)`. There are two big differences:\n\n- `geom_text()` does not understand the `fill` aesthetics, e.g. you can't change the background color of the text.\n- `geom_label()` \"is considerable slower than geom_text()\" and does not support the `check_overlap` argument and the `angle` aesthetic. But more important for my use case `geom_label()` draws a rectangle around the label. You need to add `label.size = NA` to remove the label. Although the option `label.size` is documented (\"Size of label border, in mm.\") using `NA` to remove the border completely is not explained. I had to find out it the hard way via [StackOverflow](https://stackoverflow.com/a/58242703/7322615).\n:::\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code #lst-fig-pb-13-2a lst-cap=\"Highlighting the cumulative area under the curve\"}\nx_lower <-  seq(0.006, 0.0085, 0.0005)\nx_upper <-  seq(0.0065, 0.009, 0.0005)\ntext_pos <- seq(0.00625, 0.00875, 0.0005)\ncolors <- c(\"gray90\", \"gray80\", \"gray70\", \"gray50\", \"gray40\", \"black\") \n\ndf_13_2 <- \ntibble::tibble(x = seq(0.006, 0.009, length.out = 6000),\n               y = dbeta(x, 300, 39700))\n\nggplot2::ggplot(df_13_2, ggplot2::aes(x = x, y = y)) +\nggplot2::geom_line() +\n        ggplot2::geom_area(data = df_13_2 |>\n                           dplyr::filter(x >= x_lower[1] & x <  x_upper[1]),\n                           fill = colors[1]\n                           ) +\n        ggplot2::annotate(geom = \"label\", x = text_pos[1], \n                          size = 5, y = 125, color = \"black\", fill = \"white\", label.size = NA,\n                          label = round(integrate(function(x) \n                  dbeta(x, 300, 39700), x_lower[1], x_upper[1])[[\"value\"]], 3)) +\n    \n        ggplot2::geom_area(data = df_13_2 |> \n                           dplyr::filter(x >= x_lower[2] & x <  x_upper[2]),\n                           fill = colors[2]\n                           ) +\n        ggplot2::annotate(geom = \"label\", x = text_pos[2], size = 5, y = 125, color = \"black\", fill = \"white\", label.size = NA,\n            label = round(integrate(function(x) \n              dbeta(x, 300, 39700), x_lower[1], x_upper[2])[[\"value\"]], 3)) +\n\n        ggplot2::geom_area(data = df_13_2 |> \n                           dplyr::filter(x >= x_lower[3] & x <  x_upper[3]),\n                           fill = colors[3]\n                           ) +\n        ggplot2::annotate(geom = \"label\", x = text_pos[3], size = 5, y = 125, color = \"black\", fill = \"white\", label.size = NA, \n            label = round(integrate(function(x) \n              dbeta(x, 300, 39700), x_lower[1], x_upper[3])[[\"value\"]], 3)) +\n\n        ggplot2::geom_area(data = df_13_2 |> \n                           dplyr::filter(x >= x_lower[4] & x <  x_upper[4]),\n                           fill = colors[4]\n                           ) +\n        ggplot2::annotate(geom = \"label\", x = text_pos[4], size = 5, y = 125, color = \"black\", fill = \"white\", label.size = NA, \n            label = round(integrate(function(x) \n              dbeta(x, 300, 39700), x_lower[1], x_upper[4])[[\"value\"]], 3)) +\n\n        ggplot2::geom_area(data = df_13_2 |> \n                           dplyr::filter(x >= x_lower[5] & x <  x_upper[5]),\n                           fill = colors[5]\n                           ) +\n        ggplot2::annotate(\"label\", x = text_pos[5], size = 5, y = 125, color = \"black\", fill = \"white\", label.size = NA, \n            label = round(integrate(function(x) \n              dbeta(x, 300, 39700), x_lower[1], x_upper[5])[[\"value\"]], 3)) +\n\n        ggplot2::geom_area(data = df_13_2 |> \n                           dplyr::filter(x >= x_lower[6] & x <  x_upper[6]),\n                           fill = colors[6]\n                           ) +\n        ggplot2::annotate(geom = \"label\", x = text_pos[6], size = 5, y = 125, color = \"black\", fill = \"white\", label.size = NA, \n            label = round(integrate(function(x) \n              dbeta(x, 300, 39700), x_lower[1], x_upper[6])[[\"value\"]], 3)) +\n\nggplot2::theme_bw() +\nggplot2::labs(\n    title = \"Visualizing the cumulative area under the curve\",\n    x = \"Probability of Subscription\",\n    y = \"Density\"\n)\n```\n\n::: {.cell-output-display}\n![Visualizing the cumulative area under the curve](13-pdf-cdf-quantile_files/figure-html/fig-pb-13-2a-1.png){#fig-pb-13-2a fig-align='center' width=70%}\n:::\n:::\n\n\n#### Second try (Slightly better)\n\n::: {.callout-warning}\nI am very unhappy about the many duplicates of @lst-fig-pb-13-2a. I tried to use loops or vectorized commands but the best I found out is @lst-fig-pb-13-2b with has still six duplicate code lines.\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code #lst-fig-pb-13-2b lst-cap=\"Highlighting the cumulative area under the curve\"}\nx_lower <-  seq(0.006, 0.0085, 0.0005)\nx_upper <-  seq(0.0065, 0.009, 0.0005)\nlabel_x_pos <- seq(0.00625, 0.00875, 0.0005)\ncolors <- c(\"gray90\", \"gray80\", \"gray70\", \"gray50\", \"gray40\", \"black\") \n\ncum_rate = 0\nfor (i in 1:6) {\n    cum_rate[i] <- \n    round(integrate(function(x) \n                      dbeta(x, 300, 39700), x_lower[1], x_upper[i])[[\"value\"]], 3) \n}\n\nadd_label <- function(x_pos, txt) {\n    ggplot2::annotate(\n        geom = \"label\",\n        x = x_pos,\n        y = 125,\n        size = 5,\n        label = txt,\n        label.size = NA\n    )\n}\n\n\nhighlight_one_area <- function(df, i) {\n        ggplot2::geom_area(data = df |>\n                       dplyr::filter(x >= x_lower[i] & x <  x_upper[i]),\n                       fill = colors[i])\n}\n\n\n\ndf_13_2 <- \n    tibble::tibble(x = seq(0.006, 0.009, length.out = 6000),\n                   y = dbeta(x, 300, 39700)) \n\n\np_13_2 <- \n    ggplot2::ggplot(df_13_2, ggplot2::aes(x = x, y = y)) +\n    ggplot2::geom_line() +\n    highlight_one_area(df_13_2, 1) +\n    highlight_one_area(df_13_2, 2) +\n    highlight_one_area(df_13_2, 3) +\n    highlight_one_area(df_13_2, 4) +\n    highlight_one_area(df_13_2, 5) +\n    highlight_one_area(df_13_2, 6) +\n    add_label(label_x_pos, cum_rate) +\n    ggplot2::theme_bw() +\n    ggplot2::labs(\n        title = \"Visualizing the cumulative area under the curve\",\n        x = \"Probability of Subscription\",\n        y = \"Density\"\n    )\n\np_13_2\n```\n\n::: {.cell-output-display}\n![Visualizing the cumulative area under the curve](13-pdf-cdf-quantile_files/figure-html/fig-pb-13-2b-1.png){#fig-pb-13-2b fig-align='center' width=70%}\n:::\n:::\n\n\n\n#### Third try (My best version)\n\nAs I could not find a better solution for @lst-fig-pb-13-2b myself I posted my question in [StackOverflow](https://stackoverflow.com/questions/77182234/ggplot2-shade-several-areas-under-the-curve-using-a-loop) and got an answer with two different options within one hour!\n\nThe first solution is to use `lapply()`. I should have known that as I came over a similar [solution](https://stackoverflow.com/a/18089991/7322615). The second solution is for me more complex and I have still to study it thoroughly to understand it.\n\nWhat follows in @lst-fig-pb-13-2c is the modern take of `lapply()` using the `purrr::map()` function. (I do not understand why I had to use exactly the argument \"df\" and asked via SO comment.)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code #lst-fig-pb-13-2c lst-cap=\"Highlighting the cumulative area under the curve\"}\n########### Vectors ##############\n\nx_lower <-  seq(0.006, 0.0085, 0.0005)\nx_upper <-  seq(0.0065, 0.009, 0.0005)\nlabel_x_pos <- seq(0.00625, 0.00875, 0.0005)\ncolors <- c(\"gray90\", \"gray80\", \"gray70\", \"gray50\", \"gray40\", \"black\") \n\n########### Functions ############\n\n\ncum_rate = 0\nfor (i in 1:6) {\n    cum_rate[i] <- \n    round(integrate(function(x) \n                      dbeta(x, 300, 39700), x_lower[1], x_upper[i])[[\"value\"]], 3) \n}\n\nadd_label <- function(x_pos, txt) {\n    ggplot2::annotate(\n        geom = \"label\",\n        x = x_pos,\n        y = 125,\n        size = 5,\n        label = txt,\n        label.size = NA\n    )\n}\n\nhighlight_areas <- function(df, i) {\n        ggplot2::geom_area(data = df |>\n                       dplyr::filter(x >= x_lower[i] & x <  x_upper[i]),\n                       fill = colors[i])\n}\n\n######### Graph plotting ############\n\ndf_13_2 <- \n    tibble::tibble(x = seq(0.006, 0.009, length.out = 6000),\n                   y = dbeta(x, 300, 39700)) \n\np_13_2 <- \n    ggplot2::ggplot(df_13_2, ggplot2::aes(x = x, y = y)) +\n    ggplot2::geom_line() +\n    purrr::map(1:6, highlight_areas, df = df_13_2) +\n    add_label(label_x_pos, cum_rate) +\n    ggplot2::theme_bw() +\n    ggplot2::labs(\n        title = \"Visualizing the cumulative area under the curve\",\n        x = \"Probability of Subscription\",\n        y = \"Density\"\n    )\n\np_13_2\n```\n\n::: {.cell-output-display}\n![Visualizing the cumulative area under the curve](13-pdf-cdf-quantile_files/figure-html/fig-pb-13-2c-1.png){#fig-pb-13-2c fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n\n### Replicate Figure 13-3\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code #lst-fig-pb-13-3 lst-cap=\"Plot the cumulative area under the curve\"}\ndf_13_3 <- \ntibble::tibble(x = seq(0.006, 0.009, 0.0005),\n               y = pbeta(x, 300, 39700)) \n\n    ggplot2::ggplot(df_13_3, ggplot2::aes(x = x, y = y)) +\n    ggplot2::geom_point() +\n    ggplot2::theme_bw() +\n    ggplot2::labs(\n        title = \"The cumulative distribution function\",\n        x = \"Subscription rate\",\n        y = \"Cumulative Probability\"\n    )\n```\n\n::: {.cell-output-display}\n![Plotting just the cumulative probability from Figure 13-2](13-pdf-cdf-quantile_files/figure-html/fig-pb-13-3-1.png){#fig-pb-13-3 fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n### Replicate Figure 13-4\n\n#### Cumulative Distribution Function (CDF)\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code #lst-fig-pb-13-4a lst-cap=\"Plot the Cumulative Distribution Function (CDF)\"}\ndf_13_4a <- \ntibble::tibble(x = seq(0.005, 0.01, 1e-6),\n               y = pbeta(x, 300, 39700)) \n\n    ggplot2::ggplot(df_13_4a, ggplot2::aes(x = x, y = y)) +\n    ggplot2::geom_line() +\n    ggplot2::theme_bw() +\n    ggplot2::labs(\n        title = \"The cumulative distribution function\",\n        x = \"Subscription rate\",\n        y = \"Cumulative Probability\"\n    )\n```\n\n::: {.cell-output-display}\n![The CDF for our problem](13-pdf-cdf-quantile_files/figure-html/fig-pb-13-4a-1.png){#fig-pb-13-4a fig-align='center' width=70%}\n:::\n:::\n\n\n\n#### Empiricial Cumulative Distribution Function (ECDF) - with steps\n\n::: {.callout-note}\nTrying to apply the CDF I noticed that there is also an `r `glossary(\"ECDF\")` (Empirical Cumulative Distribution Function). The differences are that the ECDF is a step function whereas the CDF is smooth. But with many different values the ECDF approximates to ta smooth function.\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code #lst-fig-pb-13-4b lst-cap=\"Plot the Empirical Cumulative Distribution Function (ECDF)\"}\ndf_13_4b <- \ntibble::tibble(x = seq(0.005, 0.01, 1e-4),\n               y = rbeta(x, 300, 39700)) \n\n\nggplot2::ggplot(df_13_4b, ggplot2::aes(y)) +\n    ggplot2::stat_ecdf(geom = \"step\") +\n    ggplot2::theme_bw() +\n    ggplot2::labs(\n        title = \"The empirical cumulative distribution function (ECDF)\",\n        x = \"x\",\n        y = \"ECDF\"\n    )\n```\n\n::: {.cell-output-display}\n![The ECDF for our problem](13-pdf-cdf-quantile_files/figure-html/fig-pb-13-4b-1.png){#fig-pb-13-4b fig-align='center' width=70%}\n:::\n:::\n\n\n#### Empiricial Cumulative Distribution Function (ECDF) - with points\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code #lst-fig-pb-13-4c lst-cap=\"Plot the Cumulative Distribution Function (CDF)\"}\ndf_13_4c <- \ntibble::tibble(x = seq(0.005, 0.01, 1e-4),\n               y = rbeta(x, 300, 39700)) \n\n\nggplot2::ggplot(df_13_4c, ggplot2::aes(y)) +\n    ggplot2::stat_ecdf(geom = \"point\") +\n    ggplot2::theme_bw() +\n    ggplot2::labs(\n        title = \"The empirical cumulative distribution function (ECDF)\",\n        x = \"x\",\n        y = \"ECDF\"\n    )\n```\n\n::: {.cell-output-display}\n![The ECDF for our problem](13-pdf-cdf-quantile_files/figure-html/fig-pb-13-4c-1.png){#fig-pb-13-4c fig-align='center' width=70%}\n:::\n:::\n\n\n\n\n#### Empiricial Cumulative Distribution Function (ECDF) - smooth\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code #lst-fig-pb-13-4d lst-cap=\"Plot the Empirical Cumulative Distribution Function (ECDF)\"}\ndf_13_4d <- \ntibble::tibble(x = seq(0.005, 0.01, 1e-6),\n               y = rbeta(x, 300, 39700)) \n\n\nggplot2::ggplot(df_13_4d, ggplot2::aes(y)) +\n    ggplot2::stat_ecdf(geom = \"step\") +\n    ggplot2::theme_bw() +\n    ggplot2::labs(\n        title = \"The empirical cumulative distribution function (ECDF)\",\n        x = \"x\",\n        y = \"ECDF\"\n    )\n```\n\n::: {.cell-output-display}\n![The ECDF for our problem](13-pdf-cdf-quantile_files/figure-html/fig-pb-13-4d-1.png){#fig-pb-13-4d fig-align='center' width=70%}\n:::\n:::\n\n\n\n### Replicate Figure 13-5\n\n\n\n### Replicate Figure 13-6\n\n\n\n### Replicate Figure 13-7\n\n\n\n### Replicate Figure 13-8\n\n\n\n",
    "supporting": [
      "13-pdf-cdf-quantile_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}