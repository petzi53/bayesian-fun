{
  "hash": "91828607335a52261cf2767be1868b2a",
  "result": {
    "markdown": "---\nengine: knitr\n---\n\n\n# Creating a Binomial Probability Distribution {#sec-prob-dist}\n\n## Structure of a Binomial Distribution\n\nA binomial distribution is used to calculate the probability of a\ncertain number of successful outcomes, given a number of trials and the\nprobability of the successful outcome. The \"bi\" in the term binomial\nrefers to the two possible outcomes that we're concerned with: an event\nhappening and an event not happening. (If there are more than two\noutcomes, the distribution is called multinomial.)\n\nExamples for a binomial distribution are:\n\n-   Flipping two heads in three coin tosses\n-   Buying 1 million lottery tickets and winning at least once\n-   Rolling fewer than three 20s in 10 rolls of a 20-sided die\n\n------------------------------------------------------------------------\n\n::: {#def-binom-dist-param}\n#### Parameter for the binomial distribution\n\nAll binomial distributions involve three parameters:\n\n-   `k` The number of outcomes we care about\n-   `n` The total number of trials\n-   `p` The probability of the event happening\n:::\n\n------------------------------------------------------------------------\n\nCalculating the probability of flipping two heads in three coin tosses:\n\n-   $k = 2$, the number of events we care about, in this case flipping a\n    heads\n-   $n = 3$, the number times the coin is flipped\n-   $p = 1/2$, the probability of flipping a heads in a coin toss\n\n------------------------------------------------------------------------\n\n::: {#thm-binomial-distribution-shorthand-notation}\n#### Shorthand notation of a binomial distribution\n\n$$B(k; n, p)$$ {#eq-short-notation}\n:::\n\n------------------------------------------------------------------------\n\nFor the example of two heads in three coin tosses, we would write\n$B(2; 3, 1/2)$.\n\n-   `B` stands for *binomial* distribution\n-   `k` is separated from the other parameters by a semicolon. This is\n    because when we are talking about a distribution of values, we\n    usually care about all values of $k$ for a fixed $n$ and $p$.\n-   `B(k; n, p)` denotes each value in the distribution\n-   `B(n, p)` denotes the whole distribution\n\n## Understanding and Abstracting Out the Details of Our Problem\n\nWe'll continue with the example of calculating the probability of\nflipping two heads in three coin tosses. Since the number of possible\noutcomes is small, we can quickly figure out the results we care about\nwith just pencil and paper.\n\n$$HHT, HTH, THH$$ To start generalizing, we'll break this problem down\ninto smaller pieces we can solve right now, and reduce those pieces into\nmanageable equations. As we build up the equations, we'll put them\ntogether to create a generalized function for the binomial distribution.\n\n***\n::: {#thm-permuation-example}\n#### Permuation Example for the Binomial Distribution\n\n-   Each outcome we care about will have the *same* probability.\n-   Each outcome is just a <a class='glossary' title='A mathematical technique that determines the number of possible arrangements in a set when the order (in contrast to COMBINATION) matters. The study of permutations is an important topic in the fields of COMBINATORICS.'>permutation</a>, or reordering,\n    of the others\n\n$$\n\\begin{align*}\nP({heads, heads, tails}) = P({heads, tails, heads}) = P({tails, heads, heads}) = \\\\\nP(\\text{Desired Outcome})\n\\end{align*}\n$$ {#eq-permutation-example}\n\nSee how to do this calculation with R in @sec-example-4-1.\n:::\n***\n\nThere are three outcomes, but only one of them can possibly happen and\nwe don't care which. And because it's only possible for one outcome to\noccur, we know that these are mutually exclusive, denoted as:\n\n$$P(\\{heads, heads, tails\\},\\{heads, tails, heads\\},\\{tails, heads, heads\\}) = 0$$\nThis makes using the sum rule of probability easy.\n\n$$\n\\begin{align*}\nP(\\{heads, heads, tails\\} \\operatorname{OR} \\{heads, tails, heads\\} \\operatorname{OR} \\{tails, heads, heads\\}) = \\\\\nP(\\text{Desired Outcome}) + P(\\text{Desired Outcome}) + P(\\text{Desired Outcome}) = \\\\\n3 \\times P(Desired Outcome)\n\\end{align*}\n$$ The value \"3\" is specific to this problem and therefore not\ngeneralizable. We can fix this by simply replacing \"3\" with a variable\ncalled $N_{outcomes}$.\n\n------------------------------------------------------------------------\n\n::: {#thm-pmf-placeholder}\n#### Solution with place holders\n\n$$B(k;n,p) = N_{outcomes} \\times P(\\text{Desired Outcome})$$ {#eq-pmf-placeholder}\n:::\n\n------------------------------------------------------------------------\n\nNow we have to figure out two subproblems:\n\n1.  How to count the number of outcomes we care about?\n2.  How to determine the probability for a single outcome?\n\n## Counting Our Outcomes with the Binomial Coefficient\n\nFirst we need to figure out how many outcomes there are for a given k\n(the outcomes we care about) and n (the number of trials). For small\nnumbers we can simply count. But it doesn't take much for this to become\ntoo difficult to do by hand. The solution is\n<a class='glossary' title='Combinatorics is an area of mathematics primarily concerned with counting. (BS, Chap.2) One of the basic problems of combinatorics is to determine the number of possible configurations of a given type. (Britannica)'>combinatorics</a>.\n\n### Combinatorics: Advanced Counting with the Binomial Coefficient\n\nThere is a special operation in combinatorics, called the *binomial\ncoefficient*, that represents counting the number of ways we can select\n`k` from `n` --- that is, selecting the outcomes we care about from the\ntotal number of trials.\n\n------------------------------------------------------------------------\n\n::: {#thm-binomial-coefficient}\n#### Notation for the binomial coefficient\n\n$$\\binom{n}{k}$$ {#eq-binomial-coefficient}\n:::\n\n------------------------------------------------------------------------\n\nWe read this as \"n choose k\". In our example we would say \"in three\ntosses choose two heads\":\n\n$$\\binom{3}{2}$$\n\n------------------------------------------------------------------------\n\n::: {#thm-def-bin-coeff}\n#### Definition of the binomial coefficient operation\n\n$$\\binom{n}{k} = \\frac{n!}{k! \\times (n-k)!}$$ {#eq-def-bin-coeff}\n:::\n\n------------------------------------------------------------------------\n\nThe `!` means *factorial*, which is the product of all the numbers up to\nand including the number before the `!` symbol, so\n$5! = (5 × 4 × 3 × 2 × 1)$.\n\nIn R we compute the binomial coefficient for the case of flipping two\nheads in three tosses with the following function call:\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-binomial-coeff lst-cap=\"**Compute the binomial coefficient for flipping two heads in three tosses**\"}\nchoose(3,2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 3\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nSee how to calculate the binomial coefficient with Base R in\n@sec-example-4-2.\n\nWe can now replace $N_{Outcomes}$ in @eq-pmf-placeholder with the\nbinomial coefficient:\n\n$$B(k;n,p) = \\binom{n}{k} \\times P(\\text{Desired Outcome})$$\n\n### Calculating the Probability of the Desired Outcome\n\nAll we have left to figure out is the $P(\\text{Desired Outcome})$, which\nis the probability of any of the possible events we care about. So far\nwe've been using $P(\\text{Desired Outcome})$ as a variable to help\norganize our solution to this problem, but now we need to figure out\nexactly how to calculate this value.\n\nLet's focus on a single case of our example of tow heads in three\ntosses: $HHT$. Using the product rule and negation from the previous\nchapter, we can describe this problem as:\n$$P(heads, heads, no heads) = P(heads, heads, 1-heads)$$ Now we can use\nthe product rule from @eq-product-rule:\n\n$$\n\\begin{align*}\nP(heads, heads, 1-heads) = \\\\\nP(heads) \\times P(heads) \\times (1-P(heads)) = \\\\\nP(heads)^2 \\times (1-P(heads))^1\n\\end{align*}\n$$ You can see that the exponents for $P(heads)^2$ and $1 – P(heads)^1$\nare just the number of heads and the number of not heads in our\nscenario. These equate to `k`, the number of outcomes we care about, and\n`n – k`, the number of trials minus the outcomes we care about. Puting\nall together:\n\n$$\n\\binom{n}{k} \\times P(heads)^{k} \\times (1- P(heads))^{n-k}\n$$ Generalizing for any probability, not just heads, we replace\n$P(heads)$ with just `p`. This gives us a *general solution*. Compare\nthe following list with @def-binom-dist-param.\n\n-   `k`, the number of outcomes we care about;\n-   `n`, the number of trials; and\n-   `p`, the probability of the individual outcome.\n\n------------------------------------------------------------------------\n\n::: {#thm-pmf}\n#### Probability Mass Function (PMF) for the Binomial Distribution\n\n$$\n\\binom{n}{k} \\times p^{k} \\times (1- p)^{n-k}\n$$ {#eq-pmf}\n:::\n\n------------------------------------------------------------------------\n\n@eq-pmf is the basis of the binomial distribution. It is called a\n<a class='glossary' title='A probability mass function (PMF) is a function that gives the probability that a discrete random variable is exactly equal to some value. Sometimes it is also known as probability function, frequency function or discrete probability density function. (Wikipedia)'>Probability Mass Function</a> (PMF). The *mass* part of the\nname comes from the fact that we can use it to calculate the amount of\nprobability for any given `k` using a fixed `n` and `p`, so this is the\nmass of our probability.\n\nNow that we have this equation, we can solve any problem related to\noutcomes of a coin toss. For example, we could calculate the probability\nof flipping exactly 12 heads in 24 coin tosses:\n\n$$\nB(12,24,\\frac{1}{2}) = \\binom{24}{12} \\times (\\frac{1}{2})^{12} \\times (1-\\frac{1}{2})^{24-12} = 0.1611803\n$$\n\n------------------------------------------------------------------------\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-calc-example lst-cap=\"**Calculate the probability of flipping exactly 12 heads in 24 coin tosses**\"}\nchoose(24,12) * (1 / 2)^(12) * (1 - 1/2)^(24 - 12)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.1611803\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nThe calculation in @lst-calc-example is only valid for our concrete\nexample.\n\nFor example, we can plug in all the possible values for `k` in 10 coin\ntosses into our PMF and visualize what the binomial distribution looks\nlike for all possible values.\n\n![Binomial Distribution for 10 Coin\nFlips](img/04fig01.jpg){#fig-10-coin-flips\nfig-alt=\"Bar graph showing the probability of getting k in 10 coin flips\"\nfig-align=\"center\" width=70%}\n\nSee my @fig-repl-10-coin-flips as a replication of @fig-10-coin-flips.\n\nWe can also look at the same distribution for the probability of getting a 6 when rolling a six-sided die 10 times, as shown in @fig-10-dice-rolls.\n\n![Binomial Distribution for 10 Coin\nFlips](img/04fig02.jpg){#fig-10-dice-rolls\nfig-alt=\"Bar graph showing the probability of getting a 6 when rolling a six-sided die 10 times\"\nfig-align=\"center\" width=70%}\n\nAgain I replicated @fig-10-dice-rolls with my @fig-repl-10-dice-rolls.\n\nBottom line of the discussion in this section: A probability distribution is a way of generalizing an entire class of problems.\n\n## Example: Gacha Games {#sec-gacha-games}\n\nThere is only one new content in this section: Instead of computing the probability of one event we are going to calculate the possibility of drawing *at least* one specific card from a pile of infinite numbers of cards where we know the probability of this card we are interested. The aim is to have a `p` of at last 50% with 100 trials and a probability of 0.720% for the card we are interested.\n\nAt first let us compute the probability for getting *exactly one card* we are interested with 100 draws form the pile. We know the probability to draw the featured card is 0.720%.\n\n$$\\binom{100}{1} \\times 0.00720^{1} \\times (1- 0.00720)^{100-1}$$\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-draw-exact-one-card lst-cap=\"Draw exact one card that has p = 0.720%\"}\ndbinom(1, 100, 0.00720)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.352085\n```\n\n\n:::\n:::\n\n\nAnd now let's compute the probability for *at least one card* we are interested.\n\nIn R, we can use the Binomial Cumulative Distribution Function `pbinom()` to automatically sum up all the values of the card we are interested in our PMF. \n\n![How the pbinom() function works](img/04fig03.jpg){#fig-pbinom-function\nfig-alt=\"Explaining the structure of the pbinom() function\"\nfig-align=\"center\" width=60%}\n\nThe `pbinom()` function takes three required arguments and an optional fourth called `lower.tail` (which defaults to TRUE). When the fourth argument is TRUE, the first argument sums up all of the probabilities less than or equal to our argument. When `lower.tail` is set to FALSE, it sums up the probabilities strictly greater than the first argument. By setting the first argument to $0$, we are looking at the probability of getting one or more the cards we are interested. We set `lower.tail` to FALSE because that means we want values greater than the first argument (by default, we get values less than the first argument).\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-use-pbinom-example lst-cap=\"Example Calculation with the pbinom() Function\"}\npbinom(0, 100, 0.00720, lower.tail = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.5145138\n```\n\n\n:::\n:::\n\n\nVoilá! This is the same result as in @#fig-pbinom-function.\n\n## Wrapping Up\n\nIn this chapter Will Kurt demonstrated how we can deduce intuitively the formula for the <a class='glossary' title='The binomial coefficient is the number of ways of picking k unordered outcomes from n possibilities, also known as a combination or combinatorial number. (&lt;a href=“https://mathworld.wolfram.com/BinomialCoefficient.html&gt;Wolfram Mathoworld)'>binomial coefficient</a>. \n\n::: {.callout-note}\nI have seen this monstrosity of expression for the binomial coefficient many times in different books and was always overwhelmed from its complexity. But this has changed now: Will Kurt succeeded to demystify the formula for me!\n:::\n\n## Exercises\n\nTry answering the following questions to make sure you’ve grasped binomial distributions fully. The solutions can be found at https://nostarch.com/learnbayes/.\n\n### Exercise 4.1\n\n::: {#exr-04-1}\nWhat are the parameters of the binomial distribution for the probability of rolling either a 1 or a 20 on a 20-sided die, if we roll the die 12 times?\n\n- k = interested events: 1 and 20 = 2.\n- n = number of trials = 12\n- p = probability for each trial = $\\frac{2}{12}$\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-exercise-04-1 lst-cap=\"**Binomial distribution for the probability of rolling either a 1 or a 20 on a 20-sided die, if we roll the die 12 times**\"}\ndbinom(2, 12, 2/20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.2301278\n```\n\n\n:::\n:::\n\n\n:::\n\n***\n\n### Exercise 4.2\n\n::: {#exr-04-2}\nThere are four aces in a deck of 52 cards. If you pull a card, return the card, then reshuffle and pull a card again, how many ways can you pull just one ace in five pulls?\n\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-exercise-04-2 lst-cap=\"**If you pull a card, return the card, then reshuffle and pull a card again, how many ways can you pull just one ace in five pulls?**\"}\ncombinat::combn(x = 1:5, m = 1, fun = tabulate, simplify = TRUE, nbins = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>      [,1] [,2] [,3] [,4] [,5]\n#> [1,]    1    0    0    0    0\n#> [2,]    0    1    0    0    0\n#> [3,]    0    0    1    0    0\n#> [4,]    0    0    0    1    0\n#> [5,]    0    0    0    0    1\n```\n\n\n:::\n\n```{.r .cell-code #lst-exercise-04-2 lst-cap=\"**If you pull a card, return the card, then reshuffle and pull a card again, how many ways can you pull just one ace in five pulls?**\"}\nchoose(5,1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 5\n```\n\n\n:::\n:::\n\n\n::: {.callout-note}\nIn contrast to the result in the solution manual I programmed the exercise with `combinat::combn()`. This correct solution pretends that I could use it for every possible arrangement. That is not true. For instance I could not manage to display the many ways of rolling two 6s in three rolls of a six-sided die.\n:::\n\n:::\n\n***\n\n### Exercise 4.3\n\n:::: {#exr-04-3}\nFor the example in @exr-04-2, what is the probability of pulling five aces in 10 pulls (remember the card is shuffled back in the deck when it is pulled)?\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-exercise-04-3 lst-cap=\"**Probability of pulling five aces in 10 pulls with replacing**\"}\ndbinom(5, 10, 4 / 52) * 100\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.04548553\n```\n\n\n:::\n:::\n\n\n::: {.callout-warning}\nOnly about 0.0455%. But this is different than the result in the solution manual with 1/32000 = 0.003125%. I don't know why there is this difference.\n:::\n\n::::\n\n***\n\n### Exercise 4.4\n\n:::: {#exr-04-4}\nWhen you’re searching for a new job, it’s always helpful to have more than one offer on the table so you can use it in negotiations. If you have a 1/5 probability of receiving a job offer when you interview, and you interview with seven companies in a month, what is the probability you’ll have at least two competing offers by the end of that month?\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-exercise-04-4 lst-cap=\"**Probability of at least 2 interviews each with 1/5 chance for a job offer having 7 interviews**\"}\npbinom(1, 7, 1/5, lower.tail = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.4232832\n```\n\n\n:::\n:::\n\n::: {.callout-note}\nThere is chance of about 42% that you receive at least two job offers.\n\nIn my first trial I calculated wrongly the probability for *exact 2* competing offers with `dbinom(2, 7, 1/2)` instead of *at least 2* competing offers! Additionally I forgot to add `lower.tail = FALSE`. to calculate *more than x*: x = 1, more than 1 = 2, therefore the first parameter is 1 (and not 2 as could be thought wrongly). Not using `lower.tail = FALSE` means that the default value of `lower.tail = TRUE` computes the probability of $P[X <= x]$ (instead of $P[X > x]$).\n:::\n\n::::\n\n***\n\n### Exercise 4.5\n\n::: {#exr-04-5}\n\nYou get a bunch of recruiter emails and find out you have 25 interviews lined up in the next month. Unfortunately, you know this will leave you exhausted, and the probability of getting an offer will drop to 1/10 if you’re tired. You really don’t want to go on this many interviews unless you are at least twice as likely to get at least two competing offers. Are you more likely to get at least two offers if you go for 25 interviews, or stick to just 7?\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-exercise-04-5 lst-cap=\"**Probability of at least 2 interviews each with 1/10 chance for a job offer having 25 interviews**\"}\npbinom(1, 25, 1/10, lower.tail = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.7287941\n```\n\n\n:::\n:::\n\nWith a reduced probability per interview you raised your changes from 42,3% to 72,9%. But to get an job offer is not twice as likely so you stick with 7 interviews.\n\n:::\n***\n\n\n## Experiments\n\n### Permutation with R {#sec-example-4-1}\n\nI want to get the same result as in @eq-permutation-example, but this\ntime using R. What are the permutations of possible events by flipping\ntwo heads in three coin tosses?\n\nLet's P(heads) = 1 and P(tails) = 0, then we can use\n`combinat::combn()`. The package {**combinat**} is not part of Base R,\nso you have to install it.\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-permutate-3-2 lst-cap=\"Permutations of possible events by flipping two heads in three coin tosses\"}\ncombinat::combn(x = c(1,2,3), m = 2, fun = tabulate, simplify = TRUE, nbins = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>      [,1] [,2] [,3]\n#> [1,]    1    1    0\n#> [2,]    1    0    1\n#> [3,]    0    1    1\n```\n\n\n:::\n:::\n\n\nThe syntax is: `combn(x, m, fun = NULL, simplify = TRUE, ...)`.\n\n-   `x`: vector source for combinations equivalent to the the number of\n    events.\n-   `m`: number of elements we are interested in\n-   `fun` = function to be applied to each combination (may be null). I\n    am using the `base::tabulate()` to take the integer-valued vector\n    and counting the number of times each integer occurs in it.\n-   `simplify`: logical, if FALSE, returns a list, otherwise returns\n    vector or array.\n-   `...`: arguments for the used function. In our case `nbins` refers\n    to the number of bin used by the `tabulate()` function.\n\nLet's try another example to understand better the pattern of the\n`combn()` functions: What are the permutations of possible events by\nflipping a coin 5 times and getting three heads:\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-permutate-3-2 lst-cap=\"Permutations of possible events by flipping two heads in five coin tosses\"}\ncombinat::combn(x = 1:5, m = 2, fun = tabulate, simplify = TRUE, nbins = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n#> [1,]    1    1    1    1    0    0    0    0    0     0\n#> [2,]    1    0    0    0    1    1    1    0    0     0\n#> [3,]    0    1    0    0    1    0    0    1    1     0\n#> [4,]    0    0    1    0    0    1    0    1    0     1\n#> [5,]    0    0    0    1    0    0    1    0    1     1\n```\n\n\n:::\n:::\n\n\n::: callout-tip\nThere is also a special package {**dice**} for the calculation of\nvarious dice-rolling events. We could for instance compute the\nprobability \"What is the probability of rolling two 6s in three rolls of\na six-sided die?\" directly with:\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-package-dice-example lst-cap=\"Compute the probability of rolling two 6s in three rolls of a six-sided die\"}\ndice::getEventProb(nrolls = 3,\n                   ndicePerRoll = 2,\n                   nsidesPerDie = 6,\n                   eventList = list(6, 6))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.052512\n```\n\n\n:::\n:::\n\n:::\n\n::: callout-warning\nActually I did not understand the many implications of computing\ncombinations and / or permutations with different functions and\ndifferent packages:\n\n-   `utils::combn()`\n-   `combinat::combn()`\n-   `gtools::combinations()` and `gtools::permutations()`\n-   `permute::permute()`, `permute::shuffle()`\n-   `base::expand.grid()`\n-   `tidyr::expand()`, `tidyr::crossing()`, `tidyr::nesting()`,\n    `tidyr::expand_grid()`\n\nAs far as I understand from my study of the Statistical Rethinking book,\nthese functions are an important topic to understand Bayesian\nStatistics. These types of functions are used for grid approximation and\nin Bayesian statistics to extract or draw samples from fit models (e.g.,\n`rethinking::extract.samples()`, `rethinking::extract.prior()`)\n\nI am sure I will need to come back to this issue and study available\nmaterial more in detail! But at the moment I am stuck and will skip this\nsubject.\n:::\n\n### Compute binomial coefficient manually {#sec-example-4-2}\n\nI want to replicate the Base R function `chosse()` with\n@eq-def-bin-coeff. This involves to calculate factorials with the\n`base::factorial()` function.\n\n$$\\binom{n}{k} = \\frac{n!}{k! \\times (n-k)!}$$\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-binomial-coeff-example lst-cap=\"**Calculate the probability of flipping exactly 12 heads in 24 coin tosses**\"}\nmy_choose <-  function(n, k) {\n    factorial(n) / (factorial(k) * factorial(n - k))\n}\n\nchoose(24, 12) == my_choose(24, 12)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] TRUE\n```\n\n\n:::\n:::\n\n\nCalculation of $\\binom{24}{12}$:\n\n-   With Base R function `choose(24, 12)` = 2.704156\\times 10^{6}.\n-   With my own function `my_choose(24, 12)` = 2.704156\\times 10^{6}.\n\n### Compute density of the binomial distribution {#sec-example-4-3}\n\nTo generalize I write my own function for the density of the binomial\ndistribution. I will use the same arguments names as in\n@def-binom-dist-param.\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-my-dbinom-func lst-cap=\"**Function for the density of the binomial distribution**\"}\nmy_dbinom <- function(k, n, p) {\n    choose(n, k) * p^k * (1 - p)^(n - k)\n}\n\nmy_dbinom(12, 24, 0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.1611803\n```\n\n\n:::\n:::\n\n\nVoilá: It gives the same result as the manual calculation in\n@lst-calc-example.\n\nI wonder if there is not a Base R function which does the same as\n`my_dbinom()`. I tried `stats::dbinom()` and it worked!\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-dbinom-func lst-cap=\"**Base R dbinom() function calculates the density of the binomial distribution**\"}\ndbinom(12, 24, 0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#> [1] 0.1611803\n```\n\n\n:::\n:::\n\n\nAgain the same result as in @lst-calc-example and @lst-my-dbinom-func!\n\n### Replication of the Binomial Distribution of 10 Coin Flips {#sec-10-coin-flips}\n\nHere I am going to try to replicate @fig-10-coin-flips.\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-repl-10-coin-flips lst-cap=\"**Replicate Figure 4.1: Binomial Distribution of 10 Coin Flips**\"}\nk_values <- seq.int(from = 0, to = 10 , by = 1)\n\ndata.frame(x = k_values, \n           y = dbinom(k_values, 10, 0.5)) |> \n    ggplot2::ggplot(ggplot2::aes(x = x, y = y)) +\n    ggplot2::geom_col()\n```\n\n::: {.cell-output-display}\n![Replication of Figure 4.1: Binomial Distribution of 10 Coin Flips with {ggplot2}](04-binomial-distribution_files/figure-html/fig-repl-10-coin-flips-1.png){#fig-repl-10-coin-flips width=672}\n:::\n:::\n\nWriting @lst-repl-10-coin-flips I had troubles applying the correct geom. At first I used `geom_bar()` but this did not work until I learned that I have to add the option \"stat = identity\" or to use `geom_col()`. The difference is:\n\n- `geom_bar()` makes the height of the bar proportional to the number of cases in each group. It uses `stat_count()` by default, e.g. it counts the number of cases at each x position. If there aren't cases but only the values then one has to add \"stat = identity\" to declare that ggplot2 should take the data \"as-is\".  \n- `geom_col()` instead takes the heights of the bars to represent values in the data. It uses `stat_identity()` and leaves the data \"as-is\" by default.\n\n::: {.callout-tip}\n\nDuring my research for writing @lst-repl-10-coin-flips I learned of the {**tidydice**} package. It simulates dice rolls and coin flips and can be used for teaching basic  experiments in introductory statistics courses.\n\nWith {**tidydice**} we replicate Figure 4.1 with just 2 lines using the `binom_coin()` inside the `plot_binom()` function. In addition to the graphical distribution it print also the exact values on top of the bars. \n\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-repl-10-coin-flips-2 lst-cap=\"**Replicate Figure 4.1: Binomial Distribution of 10 Coin Flips {tidydice}**\"}\ntidydice::plot_binom(\n  tidydice::binom_coin(times = 10, sides = 2, success = 2),\n  title = \"Binomial distribution of 10 coin flips\"\n)\n```\n\n::: {.cell-output-display}\n![Replication of Figure 4.1: Binomial Distribution of 10 Coin Flips with {tidydice}](04-binomial-distribution_files/figure-html/fig-repl-10-coin-flips-2-1.png){#fig-repl-10-coin-flips-2 width=672}\n:::\n:::\n\n{**tidydice**} has many other functions related to coin and dice experiments.\n\n:::\n\n\n### Replication of the Binomial Distribution of 10 Dice Rolls {#sec-example-4-4}\n\nI will replicate @fig-10-dice-rolls with {**ggplot2**} and with {**tidydice**}:\n\n\n::: {.cell}\n\n```{.r .cell-code #lst-repl-10-cdice-rolls lst-cap=\"**Replicate Figure 4.2: Binomial Distribution of 10 Dice Rolls**\"}\nk_values <- seq.int(from = 0, to = 10 , by = 1)\n\ndata.frame(x = k_values, \n           y = dbinom(k_values, 10, 1/6)) |> \n    ggplot2::ggplot(ggplot2::aes(x = x, y = y)) +\n    ggplot2::geom_col()\n```\n\n::: {.cell-output-display}\n![Replication of Figure 4.2: Binomial Distribution of 10 Dice Rolls with {ggplot2}](04-binomial-distribution_files/figure-html/fig-repl-10-dice-rolls-1.png){#fig-repl-10-dice-rolls width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code #lst-repl-10-dice-rolls-2 lst-cap=\"**Replicate Figure 4.2: Binomial Distribution of 10 Dice Rolls {tidydice}**\"}\ntidydice::plot_binom(\n  tidydice::binom_dice(times = 10, sides = 6, success = 6),\n  title = \"Binomial distribution of 10 dice rolls\"\n)\n```\n\n::: {.cell-output-display}\n![Replication of Figure 4.2: Binomial Distribution of 10 Dice Rolls with {tidydice}](04-binomial-distribution_files/figure-html/fig-repl-10-dice-rolls-2-1.png){#fig-repl-10-dice-rolls-2 width=672}\n:::\n:::\n",
    "supporting": [
      "04-binomial-distribution_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}